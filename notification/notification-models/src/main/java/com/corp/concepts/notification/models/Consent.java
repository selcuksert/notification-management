/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.corp.concepts.notification.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Consent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 219607971398241348L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Consent\",\"namespace\":\"com.corp.concepts.notification.models\",\"fields\":[{\"name\":\"iysCode\",\"type\":\"int\"},{\"name\":\"brandCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"consentDate\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ConsentType\",\"symbols\":[\"Mesaj\",\"Arama\",\"Eposta\"]}},{\"name\":\"recipientType\",\"type\":{\"type\":\"enum\",\"name\":\"RecipientType\",\"symbols\":[\"Bireysel\",\"Kurumsal\"]}},{\"name\":\"recipient\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"source\",\"type\":{\"type\":\"enum\",\"name\":\"Source\",\"symbols\":[\"Fiziksel\",\"Elektronik\"]}},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"Status\",\"symbols\":[\"Onay\",\"Red\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Consent> ENCODER =
      new BinaryMessageEncoder<Consent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Consent> DECODER =
      new BinaryMessageDecoder<Consent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Consent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Consent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Consent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Consent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Consent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Consent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Consent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Consent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int iysCode;
   private java.lang.String brandCode;
   private long consentDate;
   private com.corp.concepts.notification.models.ConsentType type;
   private com.corp.concepts.notification.models.RecipientType recipientType;
   private java.lang.String recipient;
   private com.corp.concepts.notification.models.Source source;
   private com.corp.concepts.notification.models.Status status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Consent() {}

  /**
   * All-args constructor.
   * @param iysCode The new value for iysCode
   * @param brandCode The new value for brandCode
   * @param consentDate The new value for consentDate
   * @param type The new value for type
   * @param recipientType The new value for recipientType
   * @param recipient The new value for recipient
   * @param source The new value for source
   * @param status The new value for status
   */
  public Consent(java.lang.Integer iysCode, java.lang.String brandCode, java.lang.Long consentDate, com.corp.concepts.notification.models.ConsentType type, com.corp.concepts.notification.models.RecipientType recipientType, java.lang.String recipient, com.corp.concepts.notification.models.Source source, com.corp.concepts.notification.models.Status status) {
    this.iysCode = iysCode;
    this.brandCode = brandCode;
    this.consentDate = consentDate;
    this.type = type;
    this.recipientType = recipientType;
    this.recipient = recipient;
    this.source = source;
    this.status = status;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return iysCode;
    case 1: return brandCode;
    case 2: return consentDate;
    case 3: return type;
    case 4: return recipientType;
    case 5: return recipient;
    case 6: return source;
    case 7: return status;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: iysCode = (java.lang.Integer)value$; break;
    case 1: brandCode = value$ != null ? value$.toString() : null; break;
    case 2: consentDate = (java.lang.Long)value$; break;
    case 3: type = (com.corp.concepts.notification.models.ConsentType)value$; break;
    case 4: recipientType = (com.corp.concepts.notification.models.RecipientType)value$; break;
    case 5: recipient = value$ != null ? value$.toString() : null; break;
    case 6: source = (com.corp.concepts.notification.models.Source)value$; break;
    case 7: status = (com.corp.concepts.notification.models.Status)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'iysCode' field.
   * @return The value of the 'iysCode' field.
   */
  public int getIysCode() {
    return iysCode;
  }


  /**
   * Sets the value of the 'iysCode' field.
   * @param value the value to set.
   */
  public void setIysCode(int value) {
    this.iysCode = value;
  }

  /**
   * Gets the value of the 'brandCode' field.
   * @return The value of the 'brandCode' field.
   */
  public java.lang.String getBrandCode() {
    return brandCode;
  }


  /**
   * Sets the value of the 'brandCode' field.
   * @param value the value to set.
   */
  public void setBrandCode(java.lang.String value) {
    this.brandCode = value;
  }

  /**
   * Gets the value of the 'consentDate' field.
   * @return The value of the 'consentDate' field.
   */
  public long getConsentDate() {
    return consentDate;
  }


  /**
   * Sets the value of the 'consentDate' field.
   * @param value the value to set.
   */
  public void setConsentDate(long value) {
    this.consentDate = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public com.corp.concepts.notification.models.ConsentType getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.corp.concepts.notification.models.ConsentType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'recipientType' field.
   * @return The value of the 'recipientType' field.
   */
  public com.corp.concepts.notification.models.RecipientType getRecipientType() {
    return recipientType;
  }


  /**
   * Sets the value of the 'recipientType' field.
   * @param value the value to set.
   */
  public void setRecipientType(com.corp.concepts.notification.models.RecipientType value) {
    this.recipientType = value;
  }

  /**
   * Gets the value of the 'recipient' field.
   * @return The value of the 'recipient' field.
   */
  public java.lang.String getRecipient() {
    return recipient;
  }


  /**
   * Sets the value of the 'recipient' field.
   * @param value the value to set.
   */
  public void setRecipient(java.lang.String value) {
    this.recipient = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public com.corp.concepts.notification.models.Source getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(com.corp.concepts.notification.models.Source value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.corp.concepts.notification.models.Status getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(com.corp.concepts.notification.models.Status value) {
    this.status = value;
  }

  /**
   * Creates a new Consent RecordBuilder.
   * @return A new Consent RecordBuilder
   */
  public static com.corp.concepts.notification.models.Consent.Builder newBuilder() {
    return new com.corp.concepts.notification.models.Consent.Builder();
  }

  /**
   * Creates a new Consent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Consent RecordBuilder
   */
  public static com.corp.concepts.notification.models.Consent.Builder newBuilder(com.corp.concepts.notification.models.Consent.Builder other) {
    if (other == null) {
      return new com.corp.concepts.notification.models.Consent.Builder();
    } else {
      return new com.corp.concepts.notification.models.Consent.Builder(other);
    }
  }

  /**
   * Creates a new Consent RecordBuilder by copying an existing Consent instance.
   * @param other The existing instance to copy.
   * @return A new Consent RecordBuilder
   */
  public static com.corp.concepts.notification.models.Consent.Builder newBuilder(com.corp.concepts.notification.models.Consent other) {
    if (other == null) {
      return new com.corp.concepts.notification.models.Consent.Builder();
    } else {
      return new com.corp.concepts.notification.models.Consent.Builder(other);
    }
  }

  /**
   * RecordBuilder for Consent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Consent>
    implements org.apache.avro.data.RecordBuilder<Consent> {

    private int iysCode;
    private java.lang.String brandCode;
    private long consentDate;
    private com.corp.concepts.notification.models.ConsentType type;
    private com.corp.concepts.notification.models.RecipientType recipientType;
    private java.lang.String recipient;
    private com.corp.concepts.notification.models.Source source;
    private com.corp.concepts.notification.models.Status status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.corp.concepts.notification.models.Consent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.iysCode)) {
        this.iysCode = data().deepCopy(fields()[0].schema(), other.iysCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.brandCode)) {
        this.brandCode = data().deepCopy(fields()[1].schema(), other.brandCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.consentDate)) {
        this.consentDate = data().deepCopy(fields()[2].schema(), other.consentDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.recipientType)) {
        this.recipientType = data().deepCopy(fields()[4].schema(), other.recipientType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.recipient)) {
        this.recipient = data().deepCopy(fields()[5].schema(), other.recipient);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.source)) {
        this.source = data().deepCopy(fields()[6].schema(), other.source);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Consent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.corp.concepts.notification.models.Consent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.iysCode)) {
        this.iysCode = data().deepCopy(fields()[0].schema(), other.iysCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brandCode)) {
        this.brandCode = data().deepCopy(fields()[1].schema(), other.brandCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.consentDate)) {
        this.consentDate = data().deepCopy(fields()[2].schema(), other.consentDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.recipientType)) {
        this.recipientType = data().deepCopy(fields()[4].schema(), other.recipientType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.recipient)) {
        this.recipient = data().deepCopy(fields()[5].schema(), other.recipient);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.source)) {
        this.source = data().deepCopy(fields()[6].schema(), other.source);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'iysCode' field.
      * @return The value.
      */
    public int getIysCode() {
      return iysCode;
    }


    /**
      * Sets the value of the 'iysCode' field.
      * @param value The value of 'iysCode'.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder setIysCode(int value) {
      validate(fields()[0], value);
      this.iysCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'iysCode' field has been set.
      * @return True if the 'iysCode' field has been set, false otherwise.
      */
    public boolean hasIysCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'iysCode' field.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder clearIysCode() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'brandCode' field.
      * @return The value.
      */
    public java.lang.String getBrandCode() {
      return brandCode;
    }


    /**
      * Sets the value of the 'brandCode' field.
      * @param value The value of 'brandCode'.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder setBrandCode(java.lang.String value) {
      validate(fields()[1], value);
      this.brandCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'brandCode' field has been set.
      * @return True if the 'brandCode' field has been set, false otherwise.
      */
    public boolean hasBrandCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'brandCode' field.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder clearBrandCode() {
      brandCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'consentDate' field.
      * @return The value.
      */
    public long getConsentDate() {
      return consentDate;
    }


    /**
      * Sets the value of the 'consentDate' field.
      * @param value The value of 'consentDate'.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder setConsentDate(long value) {
      validate(fields()[2], value);
      this.consentDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'consentDate' field has been set.
      * @return True if the 'consentDate' field has been set, false otherwise.
      */
    public boolean hasConsentDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'consentDate' field.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder clearConsentDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public com.corp.concepts.notification.models.ConsentType getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder setType(com.corp.concepts.notification.models.ConsentType value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'recipientType' field.
      * @return The value.
      */
    public com.corp.concepts.notification.models.RecipientType getRecipientType() {
      return recipientType;
    }


    /**
      * Sets the value of the 'recipientType' field.
      * @param value The value of 'recipientType'.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder setRecipientType(com.corp.concepts.notification.models.RecipientType value) {
      validate(fields()[4], value);
      this.recipientType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'recipientType' field has been set.
      * @return True if the 'recipientType' field has been set, false otherwise.
      */
    public boolean hasRecipientType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'recipientType' field.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder clearRecipientType() {
      recipientType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'recipient' field.
      * @return The value.
      */
    public java.lang.String getRecipient() {
      return recipient;
    }


    /**
      * Sets the value of the 'recipient' field.
      * @param value The value of 'recipient'.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder setRecipient(java.lang.String value) {
      validate(fields()[5], value);
      this.recipient = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'recipient' field has been set.
      * @return True if the 'recipient' field has been set, false otherwise.
      */
    public boolean hasRecipient() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'recipient' field.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder clearRecipient() {
      recipient = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public com.corp.concepts.notification.models.Source getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder setSource(com.corp.concepts.notification.models.Source value) {
      validate(fields()[6], value);
      this.source = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder clearSource() {
      source = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.corp.concepts.notification.models.Status getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder setStatus(com.corp.concepts.notification.models.Status value) {
      validate(fields()[7], value);
      this.status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.corp.concepts.notification.models.Consent.Builder clearStatus() {
      status = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Consent build() {
      try {
        Consent record = new Consent();
        record.iysCode = fieldSetFlags()[0] ? this.iysCode : (java.lang.Integer) defaultValue(fields()[0]);
        record.brandCode = fieldSetFlags()[1] ? this.brandCode : (java.lang.String) defaultValue(fields()[1]);
        record.consentDate = fieldSetFlags()[2] ? this.consentDate : (java.lang.Long) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (com.corp.concepts.notification.models.ConsentType) defaultValue(fields()[3]);
        record.recipientType = fieldSetFlags()[4] ? this.recipientType : (com.corp.concepts.notification.models.RecipientType) defaultValue(fields()[4]);
        record.recipient = fieldSetFlags()[5] ? this.recipient : (java.lang.String) defaultValue(fields()[5]);
        record.source = fieldSetFlags()[6] ? this.source : (com.corp.concepts.notification.models.Source) defaultValue(fields()[6]);
        record.status = fieldSetFlags()[7] ? this.status : (com.corp.concepts.notification.models.Status) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Consent>
    WRITER$ = (org.apache.avro.io.DatumWriter<Consent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Consent>
    READER$ = (org.apache.avro.io.DatumReader<Consent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.iysCode);

    out.writeString(this.brandCode);

    out.writeLong(this.consentDate);

    out.writeEnum(this.type.ordinal());

    out.writeEnum(this.recipientType.ordinal());

    out.writeString(this.recipient);

    out.writeEnum(this.source.ordinal());

    out.writeEnum(this.status.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.iysCode = in.readInt();

      this.brandCode = in.readString();

      this.consentDate = in.readLong();

      this.type = com.corp.concepts.notification.models.ConsentType.values()[in.readEnum()];

      this.recipientType = com.corp.concepts.notification.models.RecipientType.values()[in.readEnum()];

      this.recipient = in.readString();

      this.source = com.corp.concepts.notification.models.Source.values()[in.readEnum()];

      this.status = com.corp.concepts.notification.models.Status.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.iysCode = in.readInt();
          break;

        case 1:
          this.brandCode = in.readString();
          break;

        case 2:
          this.consentDate = in.readLong();
          break;

        case 3:
          this.type = com.corp.concepts.notification.models.ConsentType.values()[in.readEnum()];
          break;

        case 4:
          this.recipientType = com.corp.concepts.notification.models.RecipientType.values()[in.readEnum()];
          break;

        case 5:
          this.recipient = in.readString();
          break;

        case 6:
          this.source = com.corp.concepts.notification.models.Source.values()[in.readEnum()];
          break;

        case 7:
          this.status = com.corp.concepts.notification.models.Status.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










